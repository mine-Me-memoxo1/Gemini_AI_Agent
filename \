import os
from dotenv import load_dotenv
from google import genai
import sys
from google.genai import types
from config import SYSTEM_PROMPT
from functions.get_files_info import schema_get_files_info
from functions.get_file_content import schema_get_file_content
from functions.write_file import schema_write_file
from functions.run_python_file import schema_run_python_file
from functions.call_function import call_function

load_dotenv()
api_key = os.environ.get("GEMINI_API_KEY")

client = genai.Client(api_key=api_key)

user_prompt = None
if len(sys.argv) == 1:
    raise Exception('No prompt given') 
else:
    user_prompt = sys.argv[1]

verbose = True if '--verbose' in sys.argv[2:] else False

available_functions = types.Tool(
    function_declarations=[
        schema_get_files_info,
        schema_get_file_content,
        schema_write_file,
        schema_run_python_file
    ]
)
messages = [types.Content(role="user", parts=[types.Part(text=user_prompt)]),]
try:
    for _ in range(20):
        response = client.models.generate_content(model='gemini-2.0-flash-001', contents = messages, config = types.GenerateContentConfig(tools=[available_functions], system_instruction=SYSTEM_PROMPT))
        for cand in response.candidates:
            messages.append(cand.content)


        if response.text:
            print(response.text)
            
            
            
            
            

        if response.function_calls:
            for function_call_part in response.function_calls:
                print(f"- Calling function: {function_call_part.name}({function_call_part.args})")
                function_call_result = call_function(function_call_part, verbose=verbose)
                if not function_call_result.parts[0].function_response.response:
                    raise Exception("Fatal!! No response from function call!!!")
                else:
                    if verbose:
                        print(f"-> {function_call_result.parts[0].function_response.response}")
                        messages.append(types.Content(parts=[types.Part(function_response=function_call_result.parts[0].function_response)], role='user'))
            

            

        if verbose:
            print('User prompt: {}'.format(user_prompt))
            print('Prompt tokens: {}'.format(response.usage_metadata.prompt_token_count))
            print(f'Response tokens: {response.usage_metadata.candidates_token_count}')

except Exception as e:
    print(f'Error: {e}')
